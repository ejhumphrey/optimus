Conventions
- 'create' returns the spawned object
- 'add' returns nothing

Driver Definition
-----------------
- nodes: (Struct)
- graphs:  (Struct)

+ create_node(type, args)
    calls NodeFactory (from nodes.py)
    adds to internal data structure
    returns handle?

+ create_graph(name)
    return blank / empty graph


Graph Definition
----------------
- inputs: Bank of inputs (Struct)
- connections: Bank of connections, dict of lists
- outputs:
- losses
- updates
- constraints

+ create_input(name, ndim):

+ add_connection(source:str, sink:str):
    update self.connections
    however, don't actually modify the nodes

+ add_output(str?)

+ add_update(node.param.variable, hyperparam)

+ add_constraint(param, fx)

+ compile(nodes)
    step through connections
    touch / active nodes
    clear all touched nodes post-compile

+ __call__(**inputs)
    consume data
    input validate
    return list of outputs

+ @params
    return "node.param.variable" for all "active" nodes

















Driver
+ init
1. create components
    a. create nodes
        layers *and* losses
    b. create input objects
    c. create output ports
2. define graphs (functions)
    a. define connection maps (a -> b)
    b. define loss / fitness
    c. define constraints
    d. define updates
3. create data
    a. create (open) data source
    b. create data server
    c. define source-server connections

+ run
+ save
+ load






















































