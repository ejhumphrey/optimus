{
    "losses": {
        "nll": "NegativeLogLikelihood",
        "conv_reg": "L2Penalty",
        "affine_sparsity": "L1Penalty"
    },
    "input_dims": {
        "x_in": 4,
        "class_idx": 1,
        "learning_rate": 0,
        "weight_decay": 0,
        "sparsity_param": 0
    },
    "nodes": {
        "conv": {
            "type": "Conv3D",
            "args": {
                "input_shape":[
                    1,
                    28,
                    28
                ],
                "weight_shape": [
                    10,
                    1,
                    9,
                    9
                ],
                "pool_shape": [
                    2,
                    2
                ],
                "downsample_shape": [
                    1,
                    1
                ],
                "border_mode": "valid",
                "act_type": "relu",
                "enable_dropout": false
            }
        },
        "affine": {
            "type": "Affine",
            "args": {
                "input_shape":[
                    10,
                    10,
                    10
                ],
                "output_shape": [
                    128
                ],
                "act_type": "relu",
                "enable_dropout": false
            }
        },
        "classifier": {
            "type": "Softmax",
            "args": {
                "input_shape": [
                    128
                ],
                "n_out": 10,
                "act_type": "linear"
            }
        }
    },
    "graphs": {
        "transform": {
            "edges": {
                "x_in": [
                    "conv.input"
                ],
                "conv.output": [
                    "affine.input"
                ],
                "affine.output": [
                    "classifier.input"
                ]
            },
            "output": "classifier.output",
            "constraints": {},
            "updates": {}
        },
        "loss": {
            "edges": {
                "x_in": [
                    "conv.input"
                ],
                "conv.output": [
                    "affine.input"
                ],
                "affine.output": [
                    "classifier.input",
                    "affine_sparsity.variable"
                ],
                "classifier.output": [
                    "nll.posterior"
                ],
                "class_idx": [
                    "nll.target_idx"
                ],
                "sparsity_param": [
                    "affine_sparsity.parameter"
                ],
                "conv.weights": [
                    "conv_reg.variable"
                ],
                "weight_decay": [
                    "conv_reg.parameter"
                ]
            },
            "output": "classifier.output",
            "constraints": {},
            "updates": {}
        },
        "trainer": {
            "edges": {
                "x_in": [
                    "conv.input"
                ],
                "conv.output": [
                    "affine.input"
                ],
                "affine.output": [
                    "classifier.input",
                    "affine_sparsity.variable"
                ],
                "classifier.output": [
                    "nll.posterior"
                ],
                "class_idx": [
                    "nll.target_idx"
                ],
                "sparsity_param": [
                    "affine_sparsity.parameter"
                ],
                "conv.weights": [
                    "conv_reg.variable"
                ],
                "weight_decay": [
                    "conv_reg.parameter"
                ]
            },
            "output": "total_loss???",
            "updates": {
                "conv.weights": "learning_rate",
                "conv.bias": "learning_rate",
                "affine.weights": "learning_rate",
                "affine.bias": "learning_rate",
                "classifier.weights": "learning_rate",
                "classifier.bias": "learning_rate"
            },
            "constraints": {}
        }
    }
}
